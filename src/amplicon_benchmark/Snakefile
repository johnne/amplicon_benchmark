if config["no_unclassified"]:
    generate_train_test_params = "--no-unclassified"
else:
    generate_train_test_params = ""

rule all:
    input:
        expand("{f}{s}", f = ["train", "test"], s = [".fasta", "_info.tsv"])

rule filter_non_standard:
    """
    Removes sequences with non-standard nucleotides

    :param df: Dataframe with fasta sequences
    :return: Dataframe with sequences with non-standard characters removed
    """
    input:
        config["_fastafile"]
    output:
        config["fastafile"]
    run:
        drop_ids = []
        for record_id in df.index:
            seq = df.loc[record_id, "seq"]
            seq = seq.replace("-","").strip("N")
            letters = set([x for x in seq])
            for l in letters:
                if l not in ["A", "C", "G", "T"]:
                    drop_ids.append(record_id)
                    break
        return df.drop(drop_ids), len(drop_ids)

rule search_pcr:
    """
    Runs search_pcr from usearch on input file in order to identify sequences
    matching amplicon primers.
    """
    input:
        config["fastafile"],
        config["search_pcr"]["primers"]
    output:
        "amplicons_untrimmed.fasta",
        "hits.txt"
    log:
        "logs/search_pcr.log"
    threads: config["search_pcr"]["threads"]
    params:
        strand = config["search_pcr"]["strand"],
        minamp = config["search_pcr"]["minamp"],
        maxamp = config["search_pcr"]["maxamp"]
    shell:
        """
        usearch -search_pcr {input[0]} -strand both -db {input[1]} \
            -ampout {output[0]} --minamp {params.minamp} -pcrout {output[1]} \
            --maxamp {params.maxamp} -threads {threads} > {log} 2>&1
        """
                
rule trim_primers:
    input:
        "hits.txt",
        config["search_pcr"]["primers"]
    output:
        "amplicons.fasta"
    log:
        "logs/trim_primers.log"
    threads: config["threads"]
    shell:
        """
        trim_primers.py {input[0]} {input[1]} {output[0]} --threads {threads} > {log} 2>&1
        """
        
    
def train_test_input(config):
    if config["search_pcr"]["run_search"]:
        config["test_seqs"] = "amplicons.fasta"
    else:
        config["test_seqs"] = config["fastafile"]
    return [config["fastafile"], config["infofile"], config["test_seqs"]]

rule generate_train_test:
    input:
        train_test_input(config)
    output:
        expand("{f}{s}", f = ["train", "test"], s = [".fasta", "_info.tsv"])
    log:
        "logs/generate_train_test.log"
    params:
        no_unclassified = generate_train_test_params
    shell:
        """
        generate_train_test.py {input[0]} {input[1]} --test_seqs {input[2]} {params.no_unclassified} > {log} 2>&1
        """