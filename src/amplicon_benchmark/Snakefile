rule all:
    input:
        expand("{f}{s}", f = ["train", "test"], s = [".fasta", "_info.tsv"])

rule search_pcr:
    """
    Runs search_pcr from usearch on input file in order to identify sequences
    matching amplicon primers.
    """
    input:
        config["fastafile"],
        config["search_pcr"]["primers"]
    output:
        "amplicons_untrimmed.fasta"
    log:
        "logs/search_pcr.log"
    threads: config["search_pcr"]["threads"]
    params:
        strand = config["search_pcr"]["strand"],
        minamp = config["search_pcr"]["minamp"],
        maxamp = config["search_pcr"]["maxamp"]
    shell:
        """
        usearch -search_pcr {input[0]} -strand both -db {input[1]} \
            -ampout {output[0]} --minamp {params.minamp} \
            --maxamp {params.maxamp} -threads {threads} > {log} 2>&1
        """

def cutadapt_adapter_string(config):
    """
    Generates string for cutadapt, trimming all adapters from both ends of 
    sequences
    
    :param config: config dictionary 
    :return: string of adapter settings to cutadapt
    """
    a = ""
    g = ""
    with open(config["search_pcr"]["primers"], 'r') as fhin:
        for line in fhin:
            line = line.rstrip()
            if line.startswith(">"):
                continue
            a += f"-a {line}$ "
            g += f"-g ^{line} "
    return a+g            

rule trim_primers:
    input:
        "amplicons_untrimmed.fasta"
    output:
        "amplicons.fasta"
    log:
        "logs/trim_primers.log"
    params:
        adapter_string = cutadapt_adapter_string(config)
    threads: config["threads"]
    shell:
        """
        cutadapt {params.adapter_string} -j {threads} --rc {input} > {output} 2> {log}
        """
    
def train_test_input(config):
    if config["search_pcr"]["run_search"]:
        config["test_seqs"] = "amplicons.fasta"
    else:
        config["test_seqs"] = config["fastafile"]
    return [config["fastafile"], config["infofile"], config["test_seqs"]]

rule generate_train_test:
    input:
        train_test_input(config)
    output:
        expand("{f}{s}", f = ["train", "test"], s = [".fasta", "_info.tsv"])
    log: "generate_train_test.log"
    shell:
        """
        generate_train_test.py {input[0]} {input[1]} --test_seqs {input[2]}
        """